import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import asyncio
import os
from aiogram.utils import executor
import pandas as pd
from parser_1 import parse_channels 
from preprocessing_classificator_new import preprocess_data, classify_text, init_models_async, most_common_meaningful_text_async, generate_summaries
from aiogram.utils.exceptions import BotBlocked

# from preprocessing_classificator import preprocess_data, classify_text_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ aiogram
bot_token = '7466597015:AAEsbquKsmzi6Sr_YtNv3SCkeM3uukm1FT4'
bot = Bot(token=bot_token)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
start_keyboard = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="/start")]], resize_keyboard=True)

parse_keyboard = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–ù–∞—á–Ω–µ–º!")]], resize_keyboard=True)

period_keyboard = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥")],
                                                      [types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É")],
                                                      [types.KeyboardButton(text="–ö –≤–≤–æ–¥—É –∫–∞–Ω–∞–ª–æ–≤")]], resize_keyboard=True)

period_options_keyboard = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="1 –¥–µ–Ω—å")],
                                                              [types.KeyboardButton(text="3 –¥–Ω—è")], [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]], resize_keyboard=True)

#–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def generate_category_keyboard(categories):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for category in categories:
        keyboard.add(types.KeyboardButton(category))
    return keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ParseStates:
    WAITING_FOR_LINKS = 1
    WAITING_FOR_PERIOD = 2
    WAITING_FOR_DATE = 3
    CHOOSING_CATEGORY = 4
    SHOWING_NEWS = 5

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ü§ì. –î–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å!", reply_markup=parse_keyboard)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")

# –ö–æ–º–∞–Ω–¥–∞ "–ø–æ–µ—Ö–∞–ª–∏!"
@dp.message_handler(lambda message: message.text == "–ù–∞—á–Ω–µ–º!")
async def parse_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª—ã, –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π:", reply_markup=types.ReplyKeyboardRemove())
    user_data[message.from_user.id] = {'state': ParseStates.WAITING_FOR_LINKS}
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /parse")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
@dp.message_handler(lambda message: user_data.get(message.from_user.id, {}).get('state') == ParseStates.WAITING_FOR_LINKS)
async def handle_links(message: types.Message):
    user_data[message.from_user.id]['links'] = message.text
    user_data[message.from_user.id]['state'] = ParseStates.WAITING_FOR_PERIOD
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É:", reply_markup=period_keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Å—Å—ã–ª–∫–∏: {message.text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
@dp.message_handler(lambda message: message.text in ["–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "–í–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É", "1 –¥–µ–Ω—å", "3 –¥–Ω—è", "–ù–∞–∑–∞–¥", "–ö –≤–≤–æ–¥—É –∫–∞–Ω–∞–ª–æ–≤"])
async def handle_period_choice(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é: {message.text}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get(user_id, {}).get('state')}")

    if message.text == "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:", reply_markup=period_options_keyboard)
    elif message.text == "–í–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        user_data[user_id]['state'] = ParseStates.WAITING_FOR_DATE
    elif message.text in ["1 –¥–µ–Ω—å", "3 –¥–Ω—è"]:
        period_days = 3 if message.text == "3 –¥–Ω—è" else 1
        links = user_data[user_id]['links'].split(',')
        await start_parsing(message, links, period_days=period_days)
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É:", reply_markup=period_keyboard)
    elif message.text == "–ö –≤–≤–æ–¥—É –∫–∞–Ω–∞–ª–æ–≤":
        user_data[user_id]['state'] = ParseStates.WAITING_FOR_LINKS
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª—ã, –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π:",
                             reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
@dp.message_handler(lambda message: user_data.get(message.from_user.id, {}).get('state') == ParseStates.WAITING_FOR_DATE)
async def handle_date(message: types.Message):
    user_id = message.from_user.id
    date = message.text
    try:
        specific_date = pd.to_datetime(date)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    links = user_data[user_id]['links'].split(',')
    await start_parsing(message, links, specific_date=specific_date)
    # user_data[user_id]['state'] = None  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def start_parsing(message: types.Message, links: list, period_days=None, specific_date=None):
    user_id = message.from_user.id

    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...", reply_markup=types.ReplyKeyboardRemove())
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –ø–µ—Ä–∏–æ–¥–æ–º {period_days} –¥–Ω–µ–π –∏ —Å—Å—ã–ª–∫–∞–º–∏: {links}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    parsing_task = asyncio.create_task(parse_channels(links, period_days=period_days, specific_date=specific_date))
    init_models_task = asyncio.create_task(init_models_async())

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    success = await parsing_task
    classifier, ranking_model = await init_models_task

    ## –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    if success:
        await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é...")

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        scripts_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
        filepath = os.path.join(scripts_dir, 'output.csv')
        classified_filepath = os.path.join(scripts_dir, 'classified_output.csv')
        ranked_filepath = os.path.join(scripts_dir, 'ranked_output.csv')
        summary_filepath = os.path.join(scripts_dir, 'summary_output.csv')

        if os.path.exists(classified_filepath):
            df = pd.read_csv(classified_filepath)
            await message.answer(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ {classified_filepath}.")
            logger.info(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ {classified_filepath}.")
        else:
            if os.path.exists(filepath):
                df = pd.read_csv(filepath)
                df = preprocess_data(df)
                df = classify_text(df, classifier)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                df.to_csv(classified_filepath, index=False)
                await message.answer(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {classified_filepath}.")
                logger.info(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {classified_filepath}.")
            else:
                await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                logger.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

        # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        ranking_task = most_common_meaningful_text_async(df, 'Category', 'clean_text', 'Content', ranking_model)
        summary_task = generate_summaries(df)
        ranked_df, summary_df = await asyncio.gather(ranking_task, summary_task)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        ranked_df.to_csv(os.path.join(scripts_dir, 'ranked_output.csv'), index=False)
        summary_df.to_csv(os.path.join(scripts_dir, 'summary_output.csv'), index=False)
        
        await message.answer(f"–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {filepath}.")
        logger.info(f"–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {filepath}.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=generate_category_keyboard(df['Category'].unique()))
        user_data[user_id]['state'] = ParseStates.CHOOSING_CATEGORY

    else:
        await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

@dp.message_handler(lambda message: user_data.get(message.from_user.id, {}).get('state') == ParseStates.CHOOSING_CATEGORY)
async def choose_category(message: types.Message):
    user_id = message.from_user.id
    chosen_category = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    scripts_dir = os.path.dirname(os.path.abspath(__file__))
    ranked_filepath = os.path.join(scripts_dir, 'ranked_output.csv')
    summary_filepath = os.path.join(scripts_dir, 'summary_output.csv') # –î–æ–±–∞–≤–ª–µ–Ω–æ
    if os.path.exists(ranked_filepath):
        most_common_meaningful_df = pd.read_csv(ranked_filepath)
        summary_df = pd.read_csv(summary_filepath) # –î–æ–±–∞–≤–ª–µ–Ω–æ
        if chosen_category in most_common_meaningful_df['category'].values:
            news_text = most_common_meaningful_df[most_common_meaningful_df['category'] == chosen_category]['most_common_text'].values[0]
            summary_text = summary_df[summary_df['Category'] == chosen_category]['summary'].values[0] # –î–æ–±–∞–≤–ª–µ–Ω–æ
            await message.answer(f"–ù–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º–∞—è –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{chosen_category}':\n\n{news_text}\n\n–°–∞–º–º–∞—Ä–∏:\n{summary_text}") # –ò–∑–º–µ–Ω–µ–Ω–æ
            await ParseStates.SHOWING_NEWS.set()
            user_data.pop(user_id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        else:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{chosen_category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {ranked_filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logger.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {ranked_filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)


# #–¢–æ–ª—å–∫–æ –¥–ª—è API - a—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
#     if success:
#         await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é...")

#         # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
#         scripts_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
#         filepath = os.path.join(scripts_dir, 'output.csv')
#         if os.path.exists(filepath):
#             df = pd.read_csv(filepath)
#             df = preprocess_data(df)
#             classified_df = await classify_text_async(df)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é

#             # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
#             classified_df.to_csv(filepath, index=False)
#             await message.answer(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {filepath}.")
#             logger.info(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {filepath}.")
#         else:
#             await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             logger.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     else:
#         await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

#         logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
#     user_data.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

#–¢–æ–ª—å–∫–æ –¥–ª—è API - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    # if success:
    #     await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é...")

    #     # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    #     scripts_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    #     filepath = os.path.join(scripts_dir, 'output.csv')
    #     if os.path.exists(filepath):
    #         df = pd.read_csv(filepath)
    #         df = preprocess_data(df)
    #         classified_df = classify_text_async(df)

    #         # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    #         classified_df.to_csv(filepath, index=False)
    #         await message.answer("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ output.csv.")
    #     else:
    #         await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª output.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # else:
    #     await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    
    # user_data.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è